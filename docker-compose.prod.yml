# Production Docker Compose Configuration
# Use this for production deployments with optimized containers
version: "3.8"

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    ports:
      - "8000:8000"
    environment:
      # Database Configuration
      - DATABASE_URL=postgresql://user:password@postgres:5432/appdb

      # WireMock Integration
      - WIREMOCK_URL=http://wiremock:8080

      # n8n Integration
      - N8N_WEBHOOK_URL=http://n8n:5678/webhook/notification
      - N8N_WEBHOOK_SECRET=${N8N_WEBHOOK_SECRET:-specrepo-n8n-secret-2024}
      - N8N_MAX_RETRIES=3
      - N8N_RETRY_DELAY_SECONDS=5
      - N8N_TIMEOUT_SECONDS=30

      # API Configuration
      - RATE_LIMIT_MAX_ATTEMPTS=${RATE_LIMIT_MAX_ATTEMPTS:-100}
      - RATE_LIMIT_WINDOW_SECONDS=${RATE_LIMIT_WINDOW_SECONDS:-3600}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 1G
        reservations:
          cpus: "0.5"
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=production
    depends_on:
      - backend
    networks:
      - app-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 256M
        reservations:
          cpus: "0.25"
          memory: 128M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
      - POSTGRES_DB=${POSTGRES_DB:-appdb}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    networks:
      - app-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 1G
        reservations:
          cpus: "0.5"
          memory: 512M
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-user} -d ${POSTGRES_DB:-appdb}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  wiremock:
    image: wiremock/wiremock:3.3.1
    ports:
      - "8081:8080"
    volumes:
      - ./wiremock/mappings:/home/wiremock/mappings:ro
      - ./wiremock/files:/home/wiremock/__files:ro
      - wiremock_data:/home/wiremock/data
    networks:
      - app-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512M
        reservations:
          cpus: "0.25"
          memory: 256M
    command:
      ["--verbose", "--global-response-templating", "--enable-browser-proxying"]
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:8080/__admin/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  n8n:
    image: n8nio/n8n:1.19.4
    ports:
      - "5679:5678"
    volumes:
      - n8n_data:/home/node/.n8n
      - ./n8n/workflows:/home/node/workflows:ro
    environment:
      - GENERIC_TIMEZONE=${TIMEZONE:-UTC}
      - N8N_API_KEY=${N8N_API_KEY:-specrepo-n8n-api-key-2024}
      - N8N_DISABLE_UI=false
      - N8N_BASIC_AUTH_ACTIVE=false
      - N8N_WEBHOOK_URL=http://localhost:5679/
      - N8N_SECURE_COOKIE=false
      - N8N_LOG_LEVEL=${N8N_LOG_LEVEL:-info}
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=${N8N_DB_NAME:-n8n}
      - DB_POSTGRESDB_USER=${POSTGRES_USER:-user}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD:-password}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 1G
        reservations:
          cpus: "0.5"
          memory: 512M
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:5678/healthz",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

volumes:
  postgres_data:
    driver: local
  n8n_data:
    driver: local
  wiremock_data:
    driver: local

networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
