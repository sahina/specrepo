#!/usr/bin/env python3
"""
Test script to verify email delivery functionality for n8n workflow.
This script simulates the email sending behavior of the n8n workflow.
"""

import json
import os
import sys
from datetime import datetime
from typing import Any, Dict


def create_test_payload(event_type: str = "created") -> Dict[str, Any]:
    """Create a test payload for email template testing."""
    return {
        "event_type": event_type,
        "specification_id": 123,
        "specification_name": "Test API Specification",
        "version_string": "v1.0.0",
        "user_id": 456,
        "timestamp": datetime.utcnow().isoformat() + "Z",
        "openapi_content": {
            "openapi": "3.0.0",
            "info": {
                "title": "Test API",
                "description": "A comprehensive test API for email notification testing",
                "version": "1.0.0",
            },
            "paths": {
                "/users": {
                    "get": {
                        "summary": "Get all users",
                        "responses": {"200": {"description": "List of users"}},
                    }
                }
            },
        },
    }


def format_email_content(payload: Dict[str, Any]) -> Dict[str, str]:
    """Format email content based on the payload, simulating n8n workflow logic."""

    if payload["event_type"] == "created":
        subject = f"üÜï New API Specification Created: {payload['specification_name']}"
        body = f"""Hello,

A new API specification has been created:

üìã **Specification Details:**
- Name: {payload["specification_name"]}
- Version: {payload["version_string"]}
- ID: {payload["specification_id"]}
- Created by User ID: {payload["user_id"]}
- Timestamp: {payload["timestamp"]}

üîó **Quick Actions:**
- View specification: http://localhost:5173/specifications/{payload["specification_id"]}
- API Documentation: http://localhost:8001/docs

üìä **OpenAPI Summary:**
- Title: {payload["openapi_content"]["info"].get("title", "N/A")}
- Description: {payload["openapi_content"]["info"].get("description", "No description provided")}
- Version: {payload["openapi_content"]["info"].get("version", "N/A")}

This notification was automatically generated by the SpecRepo platform.

Best regards,
SpecRepo Notification System"""

    else:  # updated
        subject = f"üìù API Specification Updated: {payload['specification_name']}"
        body = f"""Hello,

An API specification has been updated:

üìã **Specification Details:**
- Name: {payload["specification_name"]}
- Version: {payload["version_string"]}
- ID: {payload["specification_id"]}
- Updated by User ID: {payload["user_id"]}
- Timestamp: {payload["timestamp"]}

üîó **Quick Actions:**
- View specification: http://localhost:5173/specifications/{payload["specification_id"]}
- API Documentation: http://localhost:8001/docs

üìä **OpenAPI Summary:**
- Title: {payload["openapi_content"]["info"].get("title", "N/A")}
- Description: {payload["openapi_content"]["info"].get("description", "No description provided")}
- Version: {payload["openapi_content"]["info"].get("version", "N/A")}

‚ö†Ô∏è **Important:** Please review the changes and update any dependent services or documentation as needed.

This notification was automatically generated by the SpecRepo platform.

Best regards,
SpecRepo Notification System"""

    return {
        "subject": subject,
        "body": body,
        "to_email": "altug@aecoffice.com",
        "from_email": "noreply@specrepo.com",
    }


def test_email_template_rendering():
    """Test email template rendering with the updated admin email."""
    print("=" * 60)
    print("EMAIL TEMPLATE TESTING")
    print("=" * 60)

    # Test created event
    print("\nüìß Testing CREATED event email template:")
    print("-" * 40)
    created_payload = create_test_payload("created")
    created_email = format_email_content(created_payload)

    print(f"To: {created_email['to_email']}")
    print(f"From: {created_email['from_email']}")
    print(f"Subject: {created_email['subject']}")
    print(f"\nBody:\n{created_email['body']}")

    # Test updated event
    print("\n" + "=" * 60)
    print("\nüìß Testing UPDATED event email template:")
    print("-" * 40)
    updated_payload = create_test_payload("updated")
    updated_email = format_email_content(updated_payload)

    print(f"To: {updated_email['to_email']}")
    print(f"From: {updated_email['from_email']}")
    print(f"Subject: {updated_email['subject']}")
    print(f"\nBody:\n{updated_email['body']}")

    print("\n" + "=" * 60)
    print("‚úÖ Email template rendering test completed!")
    print(f"‚úÖ Admin email is correctly set to: {created_email['to_email']}")
    print("‚úÖ Email templates are properly formatted")
    print("\nüí° Next steps:")
    print("1. Import the workflow in n8n at http://localhost:5679")
    print("2. Configure SMTP settings in n8n")
    print("3. Activate the workflow")
    print("4. Test with actual webhook calls")


def verify_workflow_configuration():
    """Verify the n8n workflow configuration file."""
    print("\n" + "=" * 60)
    print("WORKFLOW CONFIGURATION VERIFICATION")
    print("=" * 60)

    workflow_path = "n8n/workflows/unified-notification.json"

    if not os.path.exists(workflow_path):
        print(f"‚ùå Workflow file not found: {workflow_path}")
        return False

    try:
        with open(workflow_path, "r") as f:
            workflow_data = json.load(f)

        print(f"‚úÖ Workflow file found: {workflow_path}")
        print(f"‚úÖ Workflow name: {workflow_data.get('name', 'N/A')}")
        print(f"‚úÖ Workflow active: {workflow_data.get('active', False)}")

        # Check email nodes
        email_nodes = [
            node
            for node in workflow_data.get("nodes", [])
            if node.get("type") == "n8n-nodes-base.emailSend"
        ]

        print(f"‚úÖ Found {len(email_nodes)} email nodes")

        for i, node in enumerate(email_nodes):
            to_email = node.get("parameters", {}).get("toEmail", "N/A")
            from_email = node.get("parameters", {}).get("fromEmail", "N/A")
            print(f"   Email node {i + 1}: {node.get('name', 'N/A')}")
            print(f"     To: {to_email}")
            print(f"     From: {from_email}")

            if to_email == "altug@aecoffice.com":
                print(f"     ‚úÖ Admin email correctly configured!")
            else:
                print(f"     ‚ö†Ô∏è Admin email may need updating")

        return True

    except json.JSONDecodeError as e:
        print(f"‚ùå Invalid JSON in workflow file: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Error reading workflow file: {e}")
        return False


def main():
    """Main function to run all tests."""
    print("üß™ Testing n8n Email Delivery Configuration")
    print("Updated admin email: altug@aecoffice.com")

    # Verify workflow configuration
    config_ok = verify_workflow_configuration()

    if config_ok:
        # Test email template rendering
        test_email_template_rendering()
    else:
        print("\n‚ùå Workflow configuration verification failed!")
        sys.exit(1)


if __name__ == "__main__":
    main()
