name: CI Pipeline

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  lint-frontend:
    name: Lint Frontend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20" # Using Node.js 20 LTS

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: "10.10.0" # Version from package.json

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(cd frontend && pnpm store path --silent)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install frontend dependencies
        run: cd frontend && pnpm install --frozen-lockfile

      - name: Run frontend linting
        run: make lint-frontend

  lint-backend:
    name: Lint Backend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Configure uv cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml', '**/uv.lock') }}

      - name: Install backend dependencies
        run: |
          cd backend && uv sync --dev

      - name: Run backend linting
        run: make lint-backend

  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: lint-frontend # Depends on lint-frontend
    defaults:
      run:
        working-directory: ./
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: "10.10.0"

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(cd frontend && pnpm store path --silent)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install frontend dependencies
        run: cd frontend && pnpm install --frozen-lockfile

      - name: Build frontend
        run: make build-frontend

  build-backend-docker:
    name: Build Backend Docker Image
    runs-on: ubuntu-latest
    needs: lint-backend # Depends on lint-backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and tag Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: false # Do not push for basic CI, just build
          tags: backend-image:latest

  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    needs: lint-backend # Depends on lint-backend
    env:
      POSTGRES_USER: testuser
      POSTGRES_PASSWORD: testpassword
      POSTGRES_DB: appdb_test
    defaults:
      run:
        working-directory: ./
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Configure uv cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml', '**/uv.lock') }}

      - name: Install backend dependencies
        run: |
          cd backend && uv sync --dev

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U ${{ env.POSTGRES_USER }}; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Run backend tests
        env:
          TEST_DATABASE_URL: postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}
        run: make test-backend

  ci-build:
    name: CI Build
    runs-on: ubuntu-latest
    needs: [build-frontend, build-backend-docker, test-backend]
    defaults:
      run:
        working-directory: ./
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: "10.10.0"

      - name: Install frontend dependencies
        run: cd frontend && pnpm install --frozen-lockfile

      - name: Run CI build
        run: make ci-build

  ci-test:
    name: CI Test Suite
    runs-on: ubuntu-latest
    needs: [lint-frontend, lint-backend]
    env:
      POSTGRES_USER: testuser
      POSTGRES_PASSWORD: testpassword
      POSTGRES_DB: appdb_test
    defaults:
      run:
        working-directory: ./
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: "10.10.0"

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(cd frontend && pnpm store path --silent)" >> $GITHUB_OUTPUT

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install frontend dependencies
        run: cd frontend && pnpm install --frozen-lockfile

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Configure uv cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-deps-${{ hashFiles('**/pyproject.toml', '**/uv.lock', '**/pnpm-lock.yaml') }}

      - name: Install backend dependencies
        run: |
          cd backend && uv sync --dev

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U ${{ env.POSTGRES_USER }}; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Run CI test suite
        env:
          TEST_DATABASE_URL: postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}
        run: make ci-test
